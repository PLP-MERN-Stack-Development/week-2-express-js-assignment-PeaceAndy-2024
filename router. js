const express = require('express');
const router = express.Router();
const { validateProduct } = require('./middleware');

let products = [];

// GET all products with filtering, search, pagination
router.get('/', (req, res) => {
  let result = [...products];

  const { category, search, limit, skip } = req.query;

  if (category) {
    result = result.filter(p => p.category.toLowerCase() === category.toLowerCase());
  }

  if (search) {
    result = result.filter(p => p.name.toLowerCase().includes(search.toLowerCase()));
  }

  const skipNum = parseInt(skip) || 0;
  const limitNum = parseInt(limit) || result.length;

  result = result.slice(skipNum, skipNum + limitNum);

  res.json(result);
});

// GET product by ID
router.get('/:id', (req, res) => {
  const product = products.find(p => p.id === req.params.id);
  if (!product) return res.status(404).json({ error: 'Product not found' });
  res.json(product);
});

// POST new product
router.post('/', validateProduct, (req, res) => {
  const newProduct = { id: Date.now().toString(), ...req.body };
  products.push(newProduct);
  res.status(201).json(newProduct);
});

// PUT update product
router.put('/:id', validateProduct, (req, res) => {
 const index = products.findIndex(p => p.id === req.params.id);
  if (index === -1) return res.status(404).json({ error: 'Product not found' });
  products[index] = { id: req.params.id, ...req.body };
  res.json(products[index]);
});

// DELETE product
router.delete('/:id', (req, res) => {
  products = products.filter(p => p.id !== req.params.id);
  res.json({ message: 'Product deleted' });
});

// GET product stats (count by category)
router.get('/stats/category', (req, res) => {
  const stats = {};
  products.forEach(p => {
    const cat = p.category || 'Uncategorized';
    stats[cat] = (stats[cat] || 0) + 1;
  });
  res.json(stats);
});
module.exports = router;
